package GinkgoStack.P20_DynamicProgramming;

/**
 * 518. 零钱兑换 II
 * 给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 
 *
 *  
 *
 * 示例 1:
 *
 * 输入: amount = 5, coins = [1, 2, 5]
 * 输出: 4
 * 解释: 有四种方式可以凑成总金额:
 * 5=5
 * 5=2+2+1
 * 5=2+1+1+1
 * 5=1+1+1+1+1
 * 示例 2:
 *
 * 输入: amount = 3, coins = [2]
 * 输出: 0
 * 解释: 只用面额2的硬币不能凑成总金额3。
 * 示例 3:
 *
 * 输入: amount = 10, coins = [10]
 * 输出: 1
 *  
 *
 * 注意:
 *
 * 你可以假设：
 *
 * 0 <= amount (总金额) <= 5000
 * 1 <= coin (硬币面额) <= 5000
 * 硬币种类不超过 500 种
 * 结果符合 32 位符号整数
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/coin-change-2
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 *
 * 这是完全背包问题的一个变型
 * 硬币的面值为物品大小，总金额为背包大小，现在就不需要价值这个维度，而是关心把背包刚好塞满，有多少种不同的组合方法
 * 状态定义：
 *      dp[i] 表示选择当前硬币后，面值总和不超过i的组合数。
 *      满足最优子结构原则；选择硬币的方式对以此为子问题的大问题并没有影响，因此满足无后效性原则；
 * 转移方程：
 *      虽然它们可被重复选择，但每种硬币的面值是不一样的，因此，对于当前硬币和当前总面值来说，总的组合数就是：
 *      选择该硬币时的组合数 + 不选择该硬币的组合数 = dp[总面值(相当于背包当前容量) - 该硬币面值] + 旧的dp[i]
 */
public class ChangeCoins {
    public static void main(String[] args) {

    }

    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;

        for (int coin : coins) {
            //注意，要从前往后走，初值是硬币当前面值，这样每种硬币是可以重复选的
            for (int x = coin; x < amount + 1; ++x) {
                //选择该硬币时的组合数 + 不选择该硬币的组合数 = dp[总面值(相当于背包当前容量) - 该硬币面值] + 旧的dp[i]
                dp[x] += dp[x - coin];
            }
        }
        return dp[amount];
    }

}
