package GinkgoStack.P20_DynamicProgramming.LinearDP.knapsackProblem;

/**
 * 1049. 最后一块石头的重量 II
 * 有一堆石头，每块石头的重量都是正整数。
 *
 * 每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
 *
 * 如果 x == y，那么两块石头都会被完全粉碎；
 * 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
 * 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。
 *
 *  
 *
 * 示例：
 *
 * 输入：[2,7,4,1,8,1]
 * 输出：1
 * 解释：
 * 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
 * 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
 * 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
 * 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。
 *  
 *
 * 提示：
 *
 * 1 <= stones.length <= 30
 * 1 <= stones[i] <= 1000
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/last-stone-weight-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class LastStoneWeightII {

    /**
     * 思路：01背包问题
     *
     * 如果把一个例子写成算式，会发现其实是用加号和减号把石头门的重量连起来，并使结果最小：
     * 例子[2,7,4,1,8,1]中：
     * 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
     * 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
     * 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
     * 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。
     *
     * 即
     * 1-（（4-2）-（8-7））
     * 也就是
     * 1+2+8-4-7
     *
     * 换一种想法，就是 将这些数字分成两拨，使得他们的和的差最小，
     * 换句话说就是：选出一些数字，使得它们的和尽可能地逼近整个数组和sum的一半，假设这个值是x
     * 最终答案就是sum - 2*x
     *
     * 这是一个01背包问题，将按照石头的体积和价值相等来处理
     *
     * @param stones
     * @return
     */
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        if(n == 0){
            return 0;
        }

        int sum = 0;
        for(int s:stones){
            sum += s;
        }
        int M = sum/2;
        int[] dp = new int[M+1];
        for(int i = 0;i<n;i++){
            for(int j = M;j >= stones[i];j--){
                //石头的大小 等于石头的价值
                dp[j] = Math.max(dp[j],dp[j-stones[i]]+stones[i]);
            }
        }

        //注意，结果不能写成 (M - dp[M])*2，
        // 因为sum有可能为奇数，而M = sum/2向下取整，(M - dp[M])*2结果就少了1
        return sum - 2*dp[M];
    }

}
