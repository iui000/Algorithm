package GinkgoStack.P23_ArtConcurrentBook.chapter08;import java.util.concurrent.Exchanger;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** *  * @author tengfei.fangtf * @version $Id: ExchangerTest.java, v 0.1 2015-8-1 上午12:10:37 tengfei.fangtf Exp $ */public class ExchangerTest {    private static final Exchanger<String> exgr       = new Exchanger<String>();    private static ExecutorService threadPool = Executors.newFixedThreadPool(2);    public static void main(String[] args) {        /**         * 这两个线程通过 exchange方法交换数据，如果第一个线程先执行exchange()方法，         * 它会一直等待第二个线程也 执行exchange方法，当两个线程都到达同步点时，         * 这两个线程就可以交换数据，将本线程生产出来的数据传递给对方         */        threadPool.execute(new Runnable() {            @Override            public void run() {                try {                    String A = "银行流水A";// A录入银行流水数据                    exgr.exchange(A);//将本线程生产出来的数据传递给对方                } catch (InterruptedException e) {                }            }        });        threadPool.execute(new Runnable() {            @Override            public void run() {                try {                    String B = "银行流水B";// B录入银行流水数据                    String A = exgr.exchange("B");//将本线程生产出来的数据传递给对方                    System.out.println("A和B数据是否一致：" + A.equals(B) + "，A录入的是：" + A + "，B录入是：" + B);                } catch (InterruptedException e) {                }            }        });        threadPool.shutdown();    }}